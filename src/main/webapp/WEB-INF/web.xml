<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         metadata-complete="false" version="3.0">
    <display-name>app</display-name>

    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encodingFilter</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--Web容器在加载项目时，如Tomcat首先会加载项目的web.xml文件。
    容器对于web.xml的加载过程主要流程分为：context-param >> listener  >> fileter  >> servlet。
    Tomcat容器加载web项目的大致流程如下：
    在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。
    接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。一个web项目对应一个ServletContext
    接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。
    容器创建<listener></listener>中的类实例,即创建监听（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。
    在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，在这个方法中可以通过
    event.getServletContext().getInitParameter("contextConfigLocation") 来得到context-param 设定的值。在这个类中还必须有一个
    contextDestroyed(ServletContextEvent event) 销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。
    得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早-->

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- classpath 和 classpath* 区别：
            classpath：只会到你的class路径中查找找文件;
            classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找.
            -->
        <param-value>classpath:spring/spring-service.xml, classpath:spring/spring-dao.xml</param-value>
    </context-param>

    <listener>

        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--log4j日志配置-->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!--logback日志配置-->
    <!--<context-param>-->
        <!--<param-name>logbackConfigLocation</param-name>-->
        <!--<param-value>classpath:logback.xml</param-value>-->
    <!--</context-param>-->

    <!--<listener>-->
        <!--<listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>-->
    <!--</listener>-->

    <servlet>
        <servlet-name>myDispatcherServlet</servlet-name>

        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!-- 配置springMVC需要加载的配置文件
            spring-dao.xml, spring-service.xml, spring-mvc.xml
            Mybatis - > spring -> spring-mvc
         -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/spring-mvc.xml</param-value>
        </init-param>
        <!--The load-on-startup element indicates that this servlet should be loaded
        (instantiated and have its init() called) on the startup of the web application.
        The optional contents of these element must be an integer indicating the order in
        which the servlet should be loaded. If the value is a negative integer, or the element is
        not present, the container is free to load the servlet whenever it chooses. If the value
        is a positive integer or 0, the container must load and initialize the servlet as the
        application is deployed. The container must guarantee that servlets marked with lower
        integers are loaded before servlets marked with higher integers.The container may choose
        the order of loading of servlets with the same load-on-start-up value-->
        <load-on-startup>1</load-on-startup>
        <!--<async-supported>true</async-supported>-->
    </servlet>

    <servlet-mapping>
        <servlet-name>myDispatcherServlet</servlet-name>
        <!-- 默认匹配所有的请求 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <error-page>
        <error-code>404</error-code>
        <location>/404.html</location>
    </error-page>
</web-app>
